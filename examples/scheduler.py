#####################################
## scheduler类测试文件
####################################
#      add sfcsim path to sys path ##########
import sys     
import os
path=format(os.getcwd())
sys.path.append(path) 
# end    
from sfcsim import *
from network import *
import matplotlib.pyplot as plt
print(scheduler.__doc__)
scheduler=scheduler()
node1=node(uuid='node1',atts={'cpu':10,'memory':10,'storage':10,'access':False})
node2=node(uuid='node2',atts={'cpu':10,'memory':10,'storage':10,'access':False})
node3=node(uuid='node3',atts={'cpu':10,'memory':10,'storage':10,'access':False})
node4=node(uuid='node4',atts={'cpu':10,'memory':10,'storage':10,'access':False})
node5=node(uuid='node5',atts={'cpu':10,'memory':10,'storage':10,'access':False})
print('*****************     生成vnf_types    ******************')
vnf_types=vnf_types(3)
vnf_types.set_ratio('vnf_type1',2)
vnf_types.set_coeff('vnf_type2',{'cpu': 2})
vnf_types.show()
print('*****************     生成sfc1    ******************')
sfc1=sfc('sfc1','node3','node4',['vnf_type1','vnf_type2'],bandwidth=1,vnf_types=vnf_types)
sfc1.show()
print('*****************     生成测试网络    ******************')   
network=network([node1,node2,node3,node4,node5])
network.add_edges([['node1',node2,{'bandwidth':10}],['node1',node3,{'bandwidth':20,'delay':10}],\
                   ['node2',node3,{'bandwidth':10}],['node2','node4',{'bandwidth':10}],['node5','node4',{'bandwidth':10}]])
network.add_vnf('node1',vnf_type(name='vnf_type1',atts={'cpu':5,'memory':5,'storage':5}))
network.add_vnf('node1',vnf_type(name='vnf_type2',atts={'cpu':5,'memory':5,'storage':5}))
network.add_vnf('node2',vnf_type(name='vnf_type1',atts={'cpu':2,'memory':2,'storage':2}))
network.add_vnf('node2',vnf_type(name='vnf_type2',atts={'cpu':4,'memory':4,'storage':4}))
network.add_vnf('node3',vnf_type(atts={'cpu':1,'memory':1,'storage':1}))
print('**************************原始网络*********************************')
plt.figure(figsize=[20,15])
network.draw(nx.shell_layout(network.G))
plt.show()
plt.close()
print('**************************部署方法一**********************************')
scheduler.deploy_nf(sfc1,node1,1)
scheduler.deploy_nf(sfc1,node2,2)
scheduler.deploy_link(sfc1,1,network,[node3,node1])
scheduler.deploy_link(sfc1,2,network,[node1,node2])
scheduler.deploy_link(sfc1,3,network,[node2,node4])
scheduler.deploy_link(sfc1,3,network,[node2,node4])
plt.figure(figsize=[20,15])
network.draw(nx.shell_layout(network.G))
scheduler.show()
network.show()
plt.show()
plt.close()
print('**************************清除部署，节点链路一个个清除**********************************')
scheduler.remove_link(sfc1,1,network)
scheduler.remove_link(sfc1,2,network)
scheduler.remove_link(sfc1,3,network)
scheduler.remove_nf(sfc1,1)
scheduler.remove_nf(sfc1,2)
plt.figure(figsize=[20,15])
network.draw(nx.shell_layout(network.G))
scheduler.show()
network.show()
plt.show()
plt.close()
print('**************************部署方法二**********************************')
scheduler.deploy_nf(sfc1,node3,1)
scheduler.deploy_nf(sfc1,node2,2)
scheduler.deploy_link(sfc1,1,network,[node3,node3])
scheduler.deploy_link(sfc1,2,network,[node3,node1,node2])
scheduler.deploy_link(sfc1,3,network,[node2,node4])
plt.figure(figsize=[20,15])
network.draw(nx.shell_layout(network.G))
scheduler.show()
network.show()
plt.show()
plt.close()
print('**************************清除部署remove_sfc**********************************')
plt.figure(figsize=[20,15])
print('remove sfc1=>',scheduler.remove_sfc(sfc1,network))
network.draw(nx.shell_layout(network.G))
scheduler.show()
network.show()
plt.show()
plt.close()